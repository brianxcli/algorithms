package brian.algorithm.leetcode;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;

public class AddTwoNum {

	public AddTwoNum() {
		
	}
	
	public static void main(String[] args) {
		int[] longer = {
			230,863,916,585,981,404,316,785,88, 12,
			70, 435,384,778,887,755,740,337,86, 92,
			325,422,815,650,920,125,277,336,221,847,
			168,23, 677,61, 400,136,874,363,394,199,
			863,997,794,587,124,321,212,957,764,173,
			314,422,927,783,930,282,306,506,44, 926,
			691,568,68, 730,933,737,531,180,414,751,
			28, 546,60, 371,493,370,527,387,43, 541,
			13, 457,328,227,652,365,430,803,59, 858,
			538,427,583,368,375,173,809,896,370,789};
		
		int[] verylarge = {438,507,629,255,813,423,536,428,340,767,208,808,882,142,835,423,331,545,627,750,397,
				675,662,92,465,627,15,522,395,727,561,73,570,606,826,651,743,214,881,685,820,326,653,334,698,604,
				938,260,51,597,291,855,427,117,943,142,166,439,833,4,180,10,531,350,785,989,607,303,554,764,769,
				451,654,752,15,90,505,159,1,516,801,938,442,543,761,548,523,766,445,696,217,352,333,383,868,764,
				556,943,280,140,627,870,635,753,743,978,611,326,405,143,564,256,304,913,570,331,340,222,952,959,
				535,113,148,125,874,354,984,753,423,448,235,621,796,355,64,682,326,500,609,293,566,974,808,568,
				729,173,735,764,987,588,227,961,621,340,245,570,640,814,635,482,520,563,695,399,95,92,813,135,342,
				513,410,943,64,458,801,835,977,932,838,604,500,266,395,108,788,161,769,662,697,167,143,383,880,19,
				758,552,396,226,548,560,916,766,568,192,100,734,639,288,187,465,345,535,293,130,488,172,108,313,800,
				662,644,758,843,953,73,543,630,37,711,372,372,410,60,973,750,833,827,572,31,157,473,529,410,650,930,
				635,253,203,159,431,848,969,982,229,504,617,273,723,854,572,879,382,18,418,990,321,871,544,662,900,
				340,358,788,998,376,87,520,543,717,67,713,419,108,796,143,342,896,526,926,362,23,63,426,514,526,499,
				857,87,499,635,496,69,558,635,1,635,125,611,459,11,14,305,969,225,677,354,90,509,317,895,617,798,210,
				830,63,488,139,500,744,564,295,782,214,569,863,835,14,70,687,321,130,933,822,761,985,637,995,604,932,
				54,51,170,951,774,117,117,863,940,599,820,473,350,572,776,198,958,1,281,539,874,38,205,591,901,588,743,
				926,270,675,135,208,588,438,444,752,172,709,191,199,494,743,854,362,340,170,909,434,258,621,983,119,37,
				281,987,53,486,709,824,817,590,632,798,207,691,592,358,92,316,864,345,488,408,172,392,402,188,880,336,
				350,739,301,953,314,414,261,701,431,984,350,800,476,370,952,580,585,335,14,486,448,710,637,134,665,166,
				631,526,877,940,492,855,563,417,517,543,496,979,802,100,100,854,706,350,796,140,46,434,811,543,743,614,
				838,803,583,280,748,124,570,134,18,282,879,324,142,904,861,884,974,630,319,340,130,954,130,199,681,465,
				295,597,492,893,552,920,370,221,293,26,632,695,967,372,321,723,907,701,733,520,482,927,11,606,466,404,529,
				402,166,646,60,802,101,822,93,12,336,136,650,539,640,791,108,997,268,833,562,132,423,879,884,362,374,522,
				188,496,472,531,434,942,46,528,423,504,664,867,467,685,899,884,746,548,937,296,436,295,486,722,288,465,89,
				736,900,174,497,37,84,817,411,486,387,949,893,187,776,771,617,175,516,705,296,452,268,6,922,402,991,723,609,
				98,347,588,554,80,169,197,931,19,597,888,164,347,27,916,378,630,321,644,156,362,4,705,164,465,543,806,282,827,
				448,670,950,458,388,239,744,507,516,414,459,934,130,924,440,166,788,343,379,884,758,808,912,187,706,419,88,355,
				996,331,777,500,863,796,627,124,535,561,466,370,101,383,813,44};

		int targetth = 0;
		int largevalue = 929;
		
		int[] result = twoSum(verylarge, largevalue);
		// System.out.println(result);
		System.out.println(verylarge[308]);
		System.out.println(verylarge[654]);
	}

	private static int[] twoSum(int[] nums, int target) {
		double half = ((double) target) / 2;
        
        HashMap<Double, Integer> distances = new HashMap<Double, Integer>();
        
        int size = nums.length;
        for (int i = 0; i < size; i++) {
            double distance = Math.abs(nums[i] - half);
            
            if (distances.containsKey(distance)) {
            	int index = distances.get(distance);
            	
                if (nums[index] + nums[i] != target) {
                    continue;
                } else {
                    int[] ret = new int[2];
            		if (index < i) {
            			ret[0] = index + 1;
            			ret[1] = i + 1;
            		} else {
            			ret[0] = i + 1;
            			ret[1] = index + 1;
            		}
            		
            		return ret;
                }
            } else {
            	distances.put(distance, i);
            }
        }
        
        return null;
	}
	
	private int test(int i) {
		switch (i) {
			case 1:
				return i;
			default:
				return -1;
		}
	}
	
	private static ListNode createList(long num) {
        ListNode start = null;
        
        long division = num;
        long factor = 10;
        long residual;
        
        while (division != 0) {
        	residual = division % factor;
        	ListNode node = new ListNode((int)residual);
        	node.next = start;
        	start = node;
        	
        	division /= factor;        	
        }
        
        return start;
	}
	
	private static void dumpListNode(ListNode node) {
		ListNode temp = node;
		while (temp != null) {
			System.out.print(temp.val);
			temp = temp.next;
		}
		System.out.println();
	}
	
	private static long fromList(ListNode node) {
		LinkedList<Integer> list = new LinkedList<Integer>();
		
		ListNode temp = node;
        while (temp != null) {
        	list.addFirst(temp.val);
        	temp = temp.next;
        }
        
        int size = list.size();
        long sum = 0;
        
        for (int i = 0; i < size; i++) {
        	sum += list.get(i) * ((int) Math.pow(10, i));
        }
        
        return sum;
	}
	
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {        
        long num1 = fromList(l1);
        long num2 = fromList(l2);
        
        long sum = num1 + num2;

        return createList(sum);
    }
    
    private static class ListNode {
    	public int val;
    	public ListNode next;
    	
    	public ListNode(int x) { 
    		val = x; 
    	}
    }
}
